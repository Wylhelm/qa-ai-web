from flask import Flask, render_template, request, jsonify, send_file
from werkzeug.utils import secure_filename
import os
from ai_processor import AIProcessor
from database import Database
from image_processor import ImageProcessor

app = Flask(__name__)
app.config['UPLOAD_FOLDER'] = 'uploads'
app.config['MAX_CONTENT_LENGTH'] = 16 * 1024 * 1024  # 16MB max-limit

ai_processor = AIProcessor()
database = Database()
image_processor = ImageProcessor()

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/upload', methods=['POST'])
def upload_file():
    if 'file' not in request.files:
        return jsonify({'error': 'No file part'})
    file = request.files['file']
    if file.filename == '':
        return jsonify({'error': 'No selected file'})
    if file:
        filename = secure_filename(file.filename)
        file_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
        file.save(file_path)
        processed_data = ai_processor.process_file(file_path)
        return jsonify(processed_data)

@app.route('/generate', methods=['POST'])
def generate_scenario():
    data = request.json
    scenario = ai_processor.generate_scenario(data['criteria'], data['processed_files'])
    test_scenario = TestScenario(data['name'], data['criteria'], scenario, data['processed_files'])
    database.save_scenario(test_scenario)
    return jsonify({'scenario': scenario})

@app.route('/scenarios', methods=['GET'])
def get_scenarios():
    scenarios = database.get_scenarios()
    return jsonify([scenario.to_dict() for scenario in scenarios])

@app.route('/export/<int:scenario_id>', methods=['GET'])
def export_scenario(scenario_id):
    scenario = database.get_scenario_by_id(scenario_id)
    if scenario:
        filename = f"{scenario.name}.txt"
        with open(filename, 'w') as f:
            f.write(scenario.scenario_text)
        return send_file(filename, as_attachment=True)
    return jsonify({'error': 'Scenario not found'})

@app.route('/clear_history', methods=['POST'])
def clear_history():
    database.clear_history()
    return jsonify({'message': 'History cleared'})

if __name__ == '__main__':
    app.run(debug=True)
